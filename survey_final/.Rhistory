ggtitle("Dataset 1: Normal")
Dataset1
library(ggplot2)
Dataset1 <- ggplot(data = normFrame1, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 1: Normal")
library(qqplotr)
Dataset1 <- ggplot(data = normFrame1, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 1: Normal")
Dataset1
normFrame1 <- data.frame(value = mydata[,815])
normVector1 <- normFrame1$value
shapiro.test(normVector1)
mydata <- replicate(1000,rnorm(20,10,5))
normFrame1 <- data.frame(value = mydata[,815])
normVector1 <- normFrame1$value
Dataset1 <- ggplot(data = normFrame1, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 1: Normal")
Dataset1
shapiro.test(normVector1)
t.test(normVector1)
# DATASET 1
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,rnorm(20,10,5))
normFrame1 <- data.frame(value = mydata[,815])
normVector1 <- normFrame1$value
Dataset1 <- ggplot(data = normFrame1, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 1: Normal")
Dataset1
shapiro.test(normVector1)
normFrame1
mydata[,815]
normVector1 <- normFrame1$value
normVector1
Dataset1 <- ggplot(data = normFrame1, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 1: Normal")
Dataset1
shapiro.test(normVector1)
shapiro.test(mydata[,815])
#mydata <- replicate(1000,rf(20,3,10))
mydata <- replicate(1000,rnorm(20,10,5))
set.seed(2320)
#mydata <- replicate(1000,rf(20,3,10))
mydata <- replicate(1000,rnorm(20,10,5))
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 10 & ci[2] >= 10)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] <= 0.05){print(i)} #
}
sampledata <- mydata[,3]
shapiro.test(mydata[,100])
mydata <- replicate(1000,rnorm(20,10,5))
normFrame1 <- data.frame(value = mydata[,100])
normVector1 <- normFrame1$value
Dataset1 <- ggplot(data = normFrame1, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 1: Normal")
Dataset1
shapiro.test(normVector1)
set.seed(2320)
#mydata <- replicate(1000,rf(20,3,10))
mydata <- replicate(1000,rnorm(20,10,5))
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 10 & ci[2] >= 10)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] <= 0.05){print(i)} #
}
shapiro.test(mydata[,100])
# DATASET 1
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,rnorm(20,10,5))
normFrame1 <- data.frame(value = mydata[,100])
normVector1 <- normFrame1$value
Dataset1 <- ggplot(data = normFrame1, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 1: Normal")
Dataset1
shapiro.test(normVector1)
t.test(normVector1)
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 10 & ci[2] >= 10)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] <= 0.05){print(i)} #
}
# DATASET 3 (graph 3)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,rnorm(20,10,5))
normFrame3 <- data.frame(value = mydata[,315])
normVector3 <- normFrame3$value
normFrame3
normVector3
Dataset3 <- ggplot(data = normFrame3, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 3: Normal")
Dataset3
kurtosis(normVector3)
shapiro.test(normVector3)
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 10 & ci[2] >= 10)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] <= 0.05){print(i)} #
}
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 10 & ci[2] >= 10)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] <= 0.05){print(i)} #
}
shapiro.test(mydata[,315])
shapiro.test(mydata[,100])
shapiro.test(mydata[,572])
shapiro.test(mydata[,318])
mydata <- replicate(1000,rnorm(20,10,5))
normFrame3 <- data.frame(value = mydata[,318])
normVector3 <- normFrame3$value
normFrame3
normVector3
Dataset3 <- ggplot(data = normFrame3, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 3: Normal")
Dataset3
kurtosis(normVector3)
shapiro.test(normVector3)
# DATASET 3 (graph 3)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,rnorm(20,10,5))
normFrame3 <- data.frame(value = mydata[,318])
normVector3 <- normFrame3$value
shapiro.test(mydata[,318])
normFrame3 <- data.frame(value = mydata[,318])
normVector3 <- normFrame3$value
normFrame3
normVector3
shapiro.test(normVector3)
t.test(normVector3)
set.seed(2320)
#mydata <- replicate(1000,rf(20,3,10))
mydata <- replicate(1000,rnorm(20,10,5))
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 10 & ci[2] >= 10)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] > 0.05){print(i)} #
}
t.test(mydata[,755])
shapiro.test(mydata[,755])
# DATASET 5 (graph 5)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,rnorm(20,10,5))
normFrame5 <- data.frame(value = mydata[,7])
normVector5 <- normFrame5$value
normFrame5
normVector5
Dataset5 <- ggplot(data = normFrame5, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 5: Normal")
Dataset5
shapiro.test(normVector5)
t.test(normVector5)
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 10 & ci[2] >= 10)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] > 0.05){print(i)} #
}
mydata <- replicate(1000,rnorm(20,10,5))
normFrame8 <- data.frame(value = mydata[,16])
normVector8 <- normFrame8$value
shapiro.test(normVector8)
t.test(normVector8)
t.test(mydata[,16])
# DATASET 8
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,rnorm(20,10,5))
normFrame8 <- data.frame(value = mydata[,16])
normVector8 <- normFrame8$value
shapiro.test(normVector8)
t.test(mydata[,16])
setwd("~/Desktop/research/R Code/Survey")
# N = 30
# Always run set.seed function before running rest of code
set.seed(32144441)
normFrame8 <- data.frame(value = rnorm(30, mean = 15, sd = 5))
normVector8 <- normFrame8$value
normFrame8
normVector8
Dataset8noRef <- ggplot(data = normFrame8, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + ggtitle("Neither") +
theme(plot.title = element_text(size = 10))
Dataset8ref <- ggplot(data = normFrame8, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + ggtitle("Reference Line") +
theme(plot.title = element_text(size = 10))
Dataset8bands <- ggplot(data = normFrame8, mapping = aes(sample = value)) +
stat_qq_band(identity = FALSE, fill = "pink") +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + ggtitle("Ref. Line and Bands") +
theme(plot.title = element_text(size = 10))
Dataset8noRef
Dataset8noRef
Dataset8ref
shiny::runApp()
runApp()
# Always run set.seed function before running rest of code
set.seed(12345)
normFrame0 <- data.frame(value = rnorm(30, mean = 10, sd = 5))
normVector0 <- normFrame0$value
normFrame0
normVector0
Dataset0noRef <- ggplot(data = normFrame0, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
Dataset0ref <- ggplot(data = normFrame0, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
Dataset0bands <- ggplot(data = normFrame0, mapping = aes(sample = value)) +
stat_qq_band(identity = FALSE, fill = "pink") +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
Dataset0noRef
Dataset0ref
set.seed(2320)
mydata <- replicate(1000,rf(20,3,10))
set.seed(2320)
mydata <- replicate(1000,rf(20,3,10))
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 1.25 & ci[2] >= 1.25)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] > 0.05){print(i)} #
}
shapiro.test(mydata[,3])
# DATASET 2 (graph 2)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,rf(20,3,10))
fFrame2 <- data.frame(value = mydata[,3])
fVector2 <- fFrame2$value
shapiro.test(fVector2)
Dataset2 <- ggplot(data = fFrame2, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
stat_qq_band() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 2: Non-normal (F Dist.)")
Dataset2
t.test(fVector2)
# DATASET 7 (graph 7)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,rf(20,3,10))
fFrame7 <- data.frame(value = mydata[,21])
fVector7 <- fFrame7$value
shapiro.test(fVector7)
t.test(fVector7)
Dataset7 <- ggplot(data = fFrame7, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 7: Non-normal (F Dist.)")
Dataset7
shapiro.test(fVector7)
t.test(fVector7)
set.seed(2320)
mydata <- replicate(1000,rf(20,3,10))
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 1.25 & ci[2] >= 1.25)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] < 0.05){print(i)} #
}
# DATASET 7 (graph 7)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,rf(20,3,10))
fFrame7 <- data.frame(value = mydata[,405])
fVector7 <- fFrame7$value
Dataset7 <- ggplot(data = fFrame7, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 7: Non-normal (F Dist.)")
Dataset7
shapiro.test(fVector7)
t.test(fVector7)
set.seed(2320)
#mydata <- replicate(1000,rf(20,3,10))
#mydata <- replicate(1000,rnorm(20,10,5))
#mydata <- replicate(1000,runif(20,min=1,max=1.5))
mydata <- replicate(1000,runif(20,min=5,max=25))
check <- NULL
?runif
#mydata <- replicate(1000,rf(20,3,10))
#mydata <- replicate(1000,rnorm(20,10,5))
#mydata <- replicate(1000,runif(20,min=1,max=1.5))
mydata <- replicate(1000,runif(20,min=5,max=25))
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 15 & ci[2] >= 15)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] > 0.05){print(i)} #
}
shapiro.test(mydata[,822])
# DATASET 4 (graph 4)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,runif(20,min=5,max=25))
unifFrame4 <- data.frame(value = mydata[,822])
unifVector4 <- unifFrame4$value
Dataset4 <- ggplot(data = unifFrame4, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 4: Uniform")
Dataset4
shapiro.test(unifVector4)
# DATASET 4 (graph 4)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,runif(20,min=5,max=25))
unifFrame4 <- data.frame(value = mydata[, 822])
unifVector4 <- unifFrame4$value
Dataset4 <- ggplot(data = unifFrame4, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 4: Uniform")
Dataset4
shapiro.test(unifVector4)
# DATASET 4 (graph 4)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,runif(20,min=5,max=25))
unifFrame4 <- data.frame(value = mydata[, 822])
unifVector4 <- unifFrame4$value
shapiro.test(unifVector4)
shapiro.test(mydata[,822])
set.seed(2320)
#mydata <- replicate(1000,rf(20,3,10))
#mydata <- replicate(1000,rnorm(20,10,5))
#mydata <- replicate(1000,runif(20,min=1,max=1.5))
mydata <- replicate(1000,runif(20,min=5,max=25))
set.seed(2320)
#mydata <- replicate(1000,rf(20,3,10))
#mydata <- replicate(1000,rnorm(20,10,5))
#mydata <- replicate(1000,runif(20,min=1,max=1.5))
mydata <- replicate(1000,runif(20,min=5,max=25))
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 15 & ci[2] >= 15)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] > 0.05){print(i)} #
}
# DATASET 4 (graph 4)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,runif(20,min=5,max=25))
unifFrame4 <- data.frame(value = mydata[, 25])
unifVector4 <- unifFrame4$value
Dataset4 <- ggplot(data = unifFrame4, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 4: Uniform")
Dataset4
shapiro.test(unifVector4)
t.test(unifVector4)
shapiro.test(unifVector4)
set.seed(2320)
#mydata <- replicate(1000,rf(20,3,10))
#mydata <- replicate(1000,rnorm(20,10,5))
#mydata <- replicate(1000,runif(20,min=1,max=1.5))
mydata <- replicate(1000,runif(20,min=5,max=25))
check <- NULL
sw.pvalue <- NULL
for(i in 1:1000){
ci <- t.test(mydata[,i],mu=10,conf.level=0.95)$conf.int
check[i] <- (ci[1] <= 15 & ci[2] >= 15)
sw.pvalue[i] <- shapiro.test(mydata[,i])$p.value
if(check[i]==0 & sw.pvalue[i] <= 0.05){print(i)} #
}
# DATASET 6 (graph 6)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,runif(20,min=5,max=25))
unifFrame6 <- data.frame(value = mydata[,9])
unifVector6 <- unifFrame6$value
Dataset6 <- ggplot(data = unifFrame6, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 6: Uniform")
Dataset6
shapiro.test(unifVector6)
t.test(unifVector6)
shapiro.test(unifVector6)
# Always run set.seed function before running rest of code
set.seed(12345)
normFrame0 <- data.frame(value = rnorm(30, mean = 10, sd = 5))
normVector0 <- normFrame0$value
normFrame0
normVector0
Dataset0noRef <- ggplot(data = normFrame0, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
Dataset0ref <- ggplot(data = normFrame0, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
Dataset0bands <- ggplot(data = normFrame0, mapping = aes(sample = value)) +
stat_qq_band(identity = FALSE, fill = "pink") +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
shapiro.test(normFrame0)
shapiro.test(normVector0)
set.seed(2320)
mydata <- replicate(1000,rnorm(20,10,5))
normFrame1 <- data.frame(value = mydata[,100])
normVector1 <- normFrame1$value
Dataset1 <- ggplot(data = normFrame1, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 1: Normal")
Dataset1
# DATASET 2 (graph 2)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,rf(20,3,10))
fFrame2 <- data.frame(value = mydata[,3])
fVector2 <- fFrame2$value
Dataset2 <- ggplot(data = fFrame2, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 2: Non-normal (F Dist.)")
Dataset2
# DATASET 4 (graph 4)
# Always run set.seed function before running rest of code
set.seed(2320)
mydata <- replicate(1000,runif(20,min=5,max=25))
unifFrame4 <- data.frame(value = mydata[, 25])
unifVector4 <- unifFrame4$value
Dataset4 <- ggplot(data = unifFrame4, mapping = aes(sample = value)) +
stat_qq_point(colour = "black") +
stat_qq_line(identity = FALSE) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Dataset 4: Uniform")
Dataset4
runApp('app (Pilot).R')
runApp('~/Desktop/school/research/R Code/Final')
runApp('~/Desktop/research/R Code/Survey (FINAL)')
